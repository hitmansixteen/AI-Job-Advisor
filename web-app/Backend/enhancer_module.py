import google.generativeai as genai
import json
from dotenv import load_dotenv
import os

# Load API key from .env.local
load_dotenv(".env.local")
API_KEY = os.getenv("GOOGLE_API_KEY")

# Configure the Generative AI SDK
genai.configure(api_key=API_KEY)

def enhance_description(item):
    """
    Enhance the description of an item (project, experience, etc.) using Google's Gemini model.
    
    Args:
        item (dict or str): The item to enhance. If it's a dictionary, it contains fields like 'title', 'description', etc.
                           If it's a string, it's treated as the description itself.
    
    Returns:
        dict or str: The enhanced item with an improved description.
    """
    # Extract the description from the item
    if isinstance(item, dict):
        description = item.get("description", "")
    else:
        description = str(item)

    # Define a prompt for the language model to enhance the description
    prompt = f"Improve the following description slightly for clarity and engagement while keeping it concise and relevant:\n\n{description}"

    # Call the language model API (Gemini)
    enhanced_description = call_language_model_api(prompt, description)

    # Update the item with the enhanced description
    if isinstance(item, dict):
        item["description"] = enhanced_description
        return item
    else:
        return enhanced_description

def call_language_model_api(prompt, fallback_description):
    """
    Call Google's Gemini model to generate enhanced text.
    
    Args:
        prompt (str): The input prompt for the language model.
        fallback_description (str): The original description to return if the API call fails.
    
    Returns:
        str: The enhanced text generated by the language model or the fallback description.
    """
    try:
        # Initialize the Gemini model
        model = genai.GenerativeModel(model_name="gemini-1.5-flash")
        
        # Generate content using the prompt
        response = model.generate_content(prompt)
        
        # Extract the generated text
        return response.text.strip()
    except Exception as e:
        print(f"Error calling language model API: {e}")
        return fallback_description  # Fallback to the original description if the API call fails